#!/usr/bin/env php
<?php

use cebe\jssearch\Indexer;
use cebe\jssearch\SQLiteHelper;

// Send all errors to stderr
ini_set('display_errors', 'stderr');

// setup composer autoloading
$composerAutoload = [
    __DIR__ . '/../vendor/autoload.php', // standalone with "composer install" run
    __DIR__ . '/../../../autoload.php', // script is installed as a composer binary
];
foreach ($composerAutoload as $autoload) {
    if (file_exists($autoload)) {
        require($autoload);
        break;
    }
}

if (!class_exists('cebe\jssearch\Indexer')) {
    error('Autoloading does not seem to work. Looks like you should run `composer install` first.');
}

$outputDefaultJsFilepath = 'jssearch.index.js';
$outputDefaultPhpFilepath = 'search-engine-index.php';

$isOutputDefined = false;
$islanguageDefined = false;

$options = new stdClass;
$options->language = null;
$options->argvLanguageIndex = null;

$options->output = null;
$options->argvOutputIndex = null;

$options->db = false;

// check arguments
$src = [];
foreach ($argv as $key => $argument) {
    // skip argument value ever set
    if ($key === 0 || $key === $options->argvOutputIndex || $key === $options->argvLanguageIndex) {
        continue;
    }
    if ($argument[0] == '-') {
        $argument = explode('=', $argument);
        switch ($argument[0]) {
            case '-h':
            case '--help':
                echo "php-js-search index builder\n";
                echo "----------------------\n\n";
                usage();
                break;
            case '-l':
            case '--language':
                $options->argvLanguageIndex = $key + 1;
                $options->language = $argv[$options->argvLanguageIndex];
                break;
            case '-o':
            case '--output':
                $options->argvOutputIndex = $key + 1;
                $options->output = $argv[$options->argvOutputIndex];
                break;
            case '-db':
            case '--db':
                $options->db = true;
                break;
            default:
                error("Unknown argument " . $argument[0], "usage");
        }
    } else {
        $src[] = $argument;
    }
}

if (empty($src) || $options->language === null || !in_array($options->language, ['php', 'js'])) {
    error("You have to give an input directory and a language.", "usage");
}

$indexer = new Indexer();

foreach ($src as $dir) {
    echo "Processing $dir\n";
    $files = findFiles($dir);

    if (empty($files)) {
        echo "No files where found in $dir.\n";
    } else {
        $indexer->indexFiles($files, $dir);
    }
}

// Export the file or insert in the database
switch ($options->language) {
    case 'php':
        $options->output = ($options->output !== null) ? $options->output : $outputDefaultPhpFilepath;
        if ($options->db) {
            $db = new SQLiteHelper();
            $db->insert($indexer);
        } else {
            $export = $indexer->exportPhp();
            file_put_contents($options->output, $export);
        }
        break;

    case 'js';
        $options->output = ($options->output !== null) ? $options->output : $outputDefaultJsFilepath;
        $export = $indexer->exportJs();
        file_put_contents($options->output, $export);
        break;
}




// functions

/**
 * Display usage information
 */
function usage()
{
    global $argv;
    $cmd = $argv[0];
    echo <<<EOF
Usage:
    $cmd [src-directory]

    --help -h     shows this usage information.
    --output -o   sets the output file (Default: jssearch.index.js or search-engine-index.php).
    --language -l sets the output language (PHP or JS)
    --db -db      export index to Sqlite (for PHP only), no argument needed to this option
    
    creates the output file in the specified directory.

EOF;
    exit(1);
}

/**
 * Send custom error message to stderr
 * @param $message string
 * @param $callback mixed called before script exit
 * @return void
 */
function error($message, $callback = null)
{
    $fe = fopen("php://stderr", "w");
    fwrite($fe, "Error: " . $message . "\n");

    if (is_callable($callback)) {
        call_user_func($callback);
    }

    exit(1);
}

function findFiles($dir, $ext = '.html')
{
    if (!is_dir($dir)) {
        error("$dir is not a directory.");
    }
    $dir = rtrim($dir, DIRECTORY_SEPARATOR);
    $list = [];
    $handle = opendir($dir);
    if ($handle === false) {
        error('Unable to open directory: ' . $dir);
    }
    while (($file = readdir($handle)) !== false) {
        if ($file === '.' || $file === '..') {
            continue;
        }
        $path = $dir . DIRECTORY_SEPARATOR . $file;
        if (is_file($path)) {
            if (substr($file, -($l = strlen($ext)), $l) === $ext) {
                $list[] = $path;
            }
        } else {
            $list = array_merge($list, findFiles($path, $ext));
        }
    }
    closedir($handle);

    return $list;
}
